'scopeName': 'tests.moose'
'fileTypes': [
  'tests'
]
'foldingStartMarker': '(^\\s*\\[[^.]+\\]\\s*$)'
'foldingStopMarker': '(^\\s*\\[\\]\\s*$)'
'name': 'MOOSE Tests File'
'patterns': [
  {
    'include': '#comments'
  }
  {
    'match': '(\\[)(Tests)(\\])'
    'captures':
      '2':
        'name': 'keyword.control.moose'
  }
  {
    'match': '(\\[)(\\.\\/[^\]\.\/]+)(\\])'
    'captures':
      '2':
        'name': 'support.function.moose'
  }
  {
    'match': '\\b(type)\\s*(=)\\s*(CSVDiff|CheckFiles|Exodiff|ICEUpdaterTester|PetscJacobianTester|RunApp|RunCommand|RunException|VTKDiff|AnalyzeJacobian)'
    'captures':
      '1':
        'name': 'keyword.control.moose'
      '2':
        'name': 'keyword.operator.moose'
      '3':
        'name': 'entity.name.function.moose'
  }
  {
    'match': '\\b(type)\\s*(=)\\s*\'(CSVDiff|CheckFiles|Exodiff|ICEUpdaterTester|PetscJacobianTester|RunApp|RunCommand|RunException|VTKDiff|AnalyzeJacobian)\''
    'captures':
      '1':
        'name': 'keyword.control.moose'
      '2':
        'name': 'keyword.operator.moose'
      '3':
        'name': 'entity.name.function.moose'
  }
  {
    'match': '\\b(input|csvdiff|exodiff|jsondiff|xmldiff)\\s*(=)\\s*(.*)'
    'captures':
      '1':
        'name': 'keyword.control.moose'
      '2':
        'name': 'keyword.operator.moose'
      '3':
        'name': 'constant.other.filename.moose'
  }
  # String parameters
  {
    'match': '\\b(cli_args|command|absent_out|expect_err|expect_out|file_expect_out|input_switch|group|design|requirement|issues|detail|method|prereq|collections|required_python_packages|valgrind|petsc_version|ad_indexing_type|ad_mode|check_files|check_not_exists|errors|exodiff_opts|library_mode|skip|skip_keys)\\s*(=)\\s*(.*)'
    'captures':
      '1':
        'name': 'keyword.control.moose'
      '2':
        'name': 'keyword.operator.moose'
      '3':
        'name': 'string.quoted.moose'
  }
  # Numeric parameters
  {
    'match': '\\b(min_parallel|max_parallel|min_threads|max_threads|rel_err|abs_zero|ratio_tol|difference_tol|scale_refine|dof_id_bytes|max_buffer_size|max_time|python)\\s*(=)\\s*(.*)'
    'captures':
      '1':
        'name': 'keyword.control.moose'
      '2':
        'name': 'keyword.operator.moose'
      '3':
        'name': 'constant.numeric.moose'
  }
  # Booleans and traditionally non-quoted strings
  {
    'match': '\\b(recover|allow_warnings|allow_deprecated|allow_unused|allow_test_objects|delete_output_before_running|delete_output_folders|test_case|match_literal|use_old_floor|compiler|display_required|threading|mesh_mode|run_sim|vtk|deleted|deprecated|no_error_deprecated|custom_cmp|off_diagonal|parallel_scheduling|petsc_version_release|should_crash|should_execute|timing|turn_off_exodus_output|unique_id)\\s*(=)\\s*(.*)'
    'captures':
      '1':
        'name': 'keyword.control.moose'
      '2':
        'name': 'keyword.operator.moose'
      '3':
        'name': 'string.quoted.moose'
  }
  {
    'match': '\\[(\\.+/)\\]'
    'captures':
      '1':
        'name': 'moose'
  }
  {
    'match': '\\[\\]'
    'captures':
      '1':
        'name': 'moose'
  }
  {
    'match': '\\bfamily\\s*(=)\\s*(LAGRANGE|MONOMIAL|HERMITE|SCALAR|HIERARCHIC|CLOUGH|XYZ|SZABAB|BERNSTEIN|L2_LAGRANGE|L2_HIERARCHIC)\\b'
    'captures':
      '1':
        'name': 'keyword.operator.assignment.moose'
      '2':
        'name': 'constant.language.moose'
  }
  {
    'match': '\\belem_type\\s*(=)\\s*(EDGE|EDGE2|EDGE3|EDGE4|QUAD|QUAD4|QUAD8|QUAD9|TRI3|TRI6|HEX|HEX8|HEX20|HEX27|TET4|TET10|PRISM6|PRISM15|PRISM18)\\b'
    'captures':
      '1':
        'name': 'keyword.operator.assignment.moose'
      '2':
        'name': 'constant.language.moose'
  }
  {
    # string parameters
    'begin': '[a-z_A-Z0-9]+\\s*(=)\\s*(\')'
    'beginCaptures':
      '1':
        'name': 'keyword.operator.assignment.moose'
      '2':
        'name': 'punctuation.definition.string.begin.moose'
    'end': '\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.moose'
    'patterns': [
      {
        'include': '#numbers'
      }
    ]
  }
  {
    'begin': '[a-z_A-Z0-9]+\\s*(=)\\s*'
    'beginCaptures':
      '1':
        'name': 'keyword.operator.assignment.moose'
    'end': '\n'
    'patterns': [
      {
        'include': '#constants'
      }
      {
        'include': '#numbers'
      }
      {
        'include': '#comments'
      }
    ]
  }
]
'repository':
  'numbers':
    'patterns': [
      {
        'match': '\\b(\\d*\\.\\d+)\\b'
        'captures':
          '1':
            'name': 'constant.numeric.moose'
      }
      {
        'match': '\\b(\\d+e[+-]{0,1}\\d+)\\b'
        'captures':
          '1':
            'name': 'constant.numeric.moose'
      }
      {
        'match': '\\b(\\d*\\.\\d+e[+-]{0,1}\\d+)\\b'
        'captures':
          '1':
            'name': 'constant.numeric.moose'
      }
      {
        'match': '\\b(\\d+)\\b'
        'captures':
          '1':
            'name': 'constant.numeric.moose'
      }
    ]
  'constants':
    'patterns': [
      {
        'match': '(?i)\\b(false|true)\\b'
        'name': 'constant.language.moose'
      }
    ]
  'escaped_char':
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.moose'
      }
    ]
  'comments':
    'patterns': [
      {
        'match': '^\\s*((#+).*)'
        'captures':
          '1':
            'name': 'punctuation.definition.comment.moose'
          '2':
            'name': 'comment.line.number-sign.moose'
      }
      {
        'match': '((#+).*)'
        'captures':
          '1':
            'name': 'punctuation.definition.comment.moose'
          '2':
            'name': 'comment.line.number-sign.moose'
      }
    ]
